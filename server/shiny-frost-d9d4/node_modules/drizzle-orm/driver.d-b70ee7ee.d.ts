import { L as Logger, H as Query, ax as Assume, aH as DrizzleConfig } from './column.d-c31e7ad3.js';
import { P as PreparedQueryConfig, a as PreparedQuery, S as SelectedFieldsOrdered, b as PgSession, c as PgDialect, d as PgTransactionConfig, e as PgTransaction, Q as QueryResultHKT, f as PgDatabase } from './db.d-bc9a1d6c.js';
import { J as TablesRelationalConfig, K as RelationalSchemaConfig } from './query-promise.d-e370e0a9.js';
import pg, { PoolClient, Client, QueryResult, QueryResultRow } from 'pg';

type NodePgClient = pg.Pool | PoolClient | Client;
declare class NodePgPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private customResultMapper?;
    private rawQuery;
    private query;
    constructor(client: NodePgClient, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined, name: string | undefined, customResultMapper?: ((rows: unknown[][]) => T['execute']) | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
interface NodePgSessionOptions {
    logger?: Logger;
}
declare class NodePgSession<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends PgSession<NodePgQueryResultHKT, TFullSchema, TSchema> {
    private client;
    private schema;
    private options;
    private logger;
    constructor(client: NodePgClient, dialect: PgDialect, schema: RelationalSchemaConfig<TSchema> | undefined, options?: NodePgSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined, name: string | undefined, customResultMapper?: (rows: unknown[][]) => T['execute']): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<QueryResult>;
    queryObjects<T extends QueryResultRow>(query: string, params: unknown[]): Promise<QueryResult<T>>;
    transaction<T>(transaction: (tx: NodePgTransaction<TFullSchema, TSchema>) => Promise<T>, config?: PgTransactionConfig | undefined): Promise<T>;
}
declare class NodePgTransaction<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends PgTransaction<NodePgQueryResultHKT, TFullSchema, TSchema> {
    transaction<T>(transaction: (tx: NodePgTransaction<TFullSchema, TSchema>) => Promise<T>): Promise<T>;
}
interface NodePgQueryResultHKT extends QueryResultHKT {
    type: QueryResult<Assume<this['row'], QueryResultRow>>;
}

interface PgDriverOptions {
    logger?: Logger;
}
declare class NodePgDriver {
    private client;
    private dialect;
    private options;
    constructor(client: NodePgClient, dialect: PgDialect, options?: PgDriverOptions);
    createSession(schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined): NodePgSession<Record<string, unknown>, TablesRelationalConfig>;
    initMappers(): void;
}
type NodePgDatabase<TSchema extends Record<string, unknown> = Record<string, never>> = PgDatabase<NodePgQueryResultHKT, TSchema>;
declare function drizzle<TSchema extends Record<string, unknown> = Record<string, never>>(client: NodePgClient, config?: DrizzleConfig<TSchema>): NodePgDatabase<TSchema>;

export { NodePgDriver as N, PgDriverOptions as P, NodePgDatabase as a, NodePgClient as b, NodePgPreparedQuery as c, drizzle as d, NodePgSessionOptions as e, NodePgSession as f, NodePgTransaction as g, NodePgQueryResultHKT as h };
