import { A as AnyColumn, T as Table, V as View, S as SQL } from './column.d-c31e7ad3.js';
export { p as AnyColumnBuilder, f as AnyColumnHKT, g as AnyColumnHKTBase, h as AnyColumnKind, aj as AnyTable, ak as AnyTableHKT, al as AnyTableHKTBase, am as AnyTableKind, ax as Assume, B as BuildColumn, r as BuildColumns, E as BuildQueryConfig, s as ChangeColumnTableName, z as Chunk, e as Column, C as ColumnBaseConfig, o as ColumnBuilder, i as ColumnBuilderBaseConfig, j as ColumnBuilderConfig, m as ColumnBuilderHKT, k as ColumnBuilderHKTBase, l as ColumnBuilderKind, n as ColumnBuilderRuntimeConfig, a as ColumnConfig, d as ColumnHKT, b as ColumnHKTBase, c as ColumnKind, aK as ColumnsSelection, aG as ColumnsWithTable, u as ConsoleLogWriter, D as DefaultLogger, _ as DriverValueDecoder, $ as DriverValueEncoder, a3 as DriverValueMapper, aH as DrizzleConfig, az as DrizzleTypeError, ay as Equal, F as FakePrimitiveParam, G as GetColumnData, X as GetDecoderResult, aC as IfThenElse, I as InferColumnsDataTypes, aq as InferModel, ap as InferModelFromColumns, aI as KnownKeysOnly, t as LogWriter, L as Logger, M as MakeColumnConfig, ao as MapColumnName, Y as Name, N as NoopLogger, as as OneOrMany, O as OptionalKeyOnly, aB as Or, a5 as Param, a9 as Placeholder, aD as PromiseOf, H as Query, Q as QueryTypingsValue, R as RequiredKeyOnly, a7 as SQLChunk, J as SQLWrapper, x as SelectedFields, v as SelectedFieldsFlat, w as SelectedFieldsFlatFull, y as SelectedFieldsOrdered, af as SelectionProxyHandler, av as Simplify, au as SimplifyOptions, aw as SimplifyShallow, P as StringChunk, ad as Subquery, ac as SubqueryConfig, ag as TableConfig, at as Update, q as UpdateCBConfig, U as UpdateColConfig, ar as UpdateSet, ah as UpdateTableConfig, aA as ValueOrArray, aJ as ViewBaseConfig, W as WithEnum, ae as WithSubquery, aE as Writable, ab as fillPlaceholders, aF as getTableColumns, an as getTableName, a0 as isDriverValueEncoder, K as isSQLWrapper, ai as isTable, Z as name, a1 as noopDecoder, a2 as noopEncoder, a4 as noopMapper, a6 as param, aa as placeholder, a8 as sql } from './column.d-c31e7ad3.js';
import { R as Relation } from './query-promise.d-e370e0a9.js';
export { U as BuildQueryResult, P as BuildRelationResult, a2 as BuildRelationalQueryResult, H as DBQueryConfig, z as ExtractObjectValues, A as ExtractRelationsFromTableExtraConfigSchema, E as ExtractTableRelationsFromSchema, L as ExtractTablesWithRelations, G as FindTableByDBName, M as Many, S as NonUndefinedKeysOnly, _ as NormalizedRelation, O as One, C as Operators, F as OrderByOperators, Q as QueryPromise, V as RelationConfig, K as RelationalSchemaConfig, y as Relations, N as ReturnTypeOrValue, I as TableRelationalConfig, a1 as TableRelationsHelpers, T as TableRelationsKeysOnly, J as TablesRelationalConfig, a as and, w as asc, q as between, b as bindIfParam, Z as createMany, Y as createOne, a0 as createTableRelationsHelpers, x as desc, e as eq, m as exists, W as extractTablesRelationalConfig, g as gt, d as gte, u as ilike, i as inArray, k as isNotNull, j as isNull, s as like, l as lt, f as lte, a3 as mapRelationalRow, n as ne, $ as normalizeRelation, c as not, r as notBetween, p as notExists, v as notIlike, h as notInArray, t as notLike, B as operators, o as or, D as orderByOperators, X as relations } from './query-promise.d-e370e0a9.js';

declare class ColumnAliasProxyHandler<TColumn extends AnyColumn> implements ProxyHandler<TColumn> {
    private table;
    constructor(table: Table | View);
    get(columnObj: TColumn, prop: string | symbol): any;
}
declare class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {
    private alias;
    private replaceOriginalName;
    constructor(alias: string, replaceOriginalName: boolean);
    get(target: T, prop: string | symbol): any;
}
declare class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {
    private alias;
    constructor(alias: string);
    get(target: T, prop: string | symbol): any;
}
declare function aliasedTable<T extends Table>(table: T, tableAlias: string): T;
declare function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T;
declare function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T;
declare function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased;
declare function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL;

declare class DrizzleError extends Error {
    constructor(message: string);
    static wrap(error: unknown, message?: string): DrizzleError;
}
declare class TransactionRollbackError extends DrizzleError {
    constructor();
}

export { AnyColumn, ColumnAliasProxyHandler, DrizzleError, Relation, RelationTableAliasProxyHandler, SQL, Table, TableAliasProxyHandler, TransactionRollbackError, View, aliasedRelation, aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias };
