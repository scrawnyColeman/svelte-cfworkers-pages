import { N as NoopLogger, D as DefaultLogger } from '../logger-caf75bde.mjs';
import { a6 as sql, a9 as fillPlaceholders, ao as mapResultRow, K as extractTablesRelationalConfig, U as createTableRelationsHelpers } from '../relations-7adf6be2.mjs';
import { S as SQLiteSession, a as SQLiteTransaction, P as PreparedQuery$1, B as BaseSQLiteDatabase, c as SQLiteAsyncDialect } from '../session-686f8b9d.mjs';
import '../errors-bb636d84.mjs';

/// <reference types="@cloudflare/workers-types" />
class SQLiteD1Session extends SQLiteSession {
    constructor(client, dialect, schema, options = {}) {
        super(dialect);
        this.client = client;
        this.schema = schema;
        this.options = options;
        this.logger = options.logger ?? new NoopLogger();
    }
    prepareQuery(query, fields, customResultMapper) {
        const stmt = this.client.prepare(query.sql);
        return new PreparedQuery(stmt, query.sql, query.params, this.logger, fields, customResultMapper);
    }
    async transaction(transaction, config) {
        const tx = new D1Transaction('async', this.dialect, this, this.schema);
        await this.run(sql.raw(`begin${config?.behavior ? ' ' + config.behavior : ''}`));
        try {
            const result = await transaction(tx);
            await this.run(sql `commit`);
            return result;
        }
        catch (err) {
            await this.run(sql `rollback`);
            throw err;
        }
    }
}
class D1Transaction extends SQLiteTransaction {
    async transaction(transaction) {
        const savepointName = `sp${this.nestedIndex}`;
        const tx = new D1Transaction('async', this.dialect, this.session, this.schema, this.nestedIndex + 1);
        await this.session.run(sql.raw(`savepoint ${savepointName}`));
        try {
            const result = await transaction(tx);
            await this.session.run(sql.raw(`release savepoint ${savepointName}`));
            return result;
        }
        catch (err) {
            await this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));
            throw err;
        }
    }
}
class PreparedQuery extends PreparedQuery$1 {
    constructor(stmt, queryString, params, logger, fields, customResultMapper) {
        super();
        this.stmt = stmt;
        this.queryString = queryString;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
        this.customResultMapper = customResultMapper;
    }
    run(placeholderValues) {
        const params = fillPlaceholders(this.params, placeholderValues ?? {});
        this.logger.logQuery(this.queryString, params);
        return this.stmt.bind(...params).run();
    }
    async all(placeholderValues) {
        const { fields, joinsNotNullableMap, queryString, logger, stmt, customResultMapper } = this;
        if (!fields && !customResultMapper) {
            const params = fillPlaceholders(this.params, placeholderValues ?? {});
            logger.logQuery(queryString, params);
            return stmt.bind(...params).all().then(({ results }) => results);
        }
        const rows = await this.values(placeholderValues);
        if (customResultMapper) {
            return customResultMapper(rows);
        }
        return rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));
    }
    async get(placeholderValues) {
        const { fields, joinsNotNullableMap, queryString, logger, stmt, customResultMapper } = this;
        if (!fields && !customResultMapper) {
            const params = fillPlaceholders(this.params, placeholderValues ?? {});
            logger.logQuery(queryString, params);
            return stmt.bind(...params).all().then(({ results }) => results);
        }
        const rows = await this.values(placeholderValues);
        if (!rows[0]) {
            return undefined;
        }
        if (customResultMapper) {
            return customResultMapper(rows);
        }
        return mapResultRow(fields, rows[0], joinsNotNullableMap);
    }
    values(placeholderValues) {
        const params = fillPlaceholders(this.params, placeholderValues ?? {});
        this.logger.logQuery(this.queryString, params);
        return this.stmt.bind(...params).raw();
    }
}

/// <reference types="@cloudflare/workers-types" />
function drizzle(client, config = {}) {
    const dialect = new SQLiteAsyncDialect();
    let logger;
    if (config.logger === true) {
        logger = new DefaultLogger();
    }
    else if (config.logger !== false) {
        logger = config.logger;
    }
    let schema;
    if (config.schema) {
        const tablesConfig = extractTablesRelationalConfig(config.schema, createTableRelationsHelpers);
        schema = {
            fullSchema: config.schema,
            schema: tablesConfig.tables,
            tableNamesMap: tablesConfig.tableNamesMap,
        };
    }
    const session = new SQLiteD1Session(client, dialect, schema, { logger });
    return new BaseSQLiteDatabase('async', dialect, session, schema);
}

export { D1Transaction, PreparedQuery, SQLiteD1Session, drizzle };
//# sourceMappingURL=index.mjs.map
